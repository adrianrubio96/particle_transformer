selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   obj_mask: ak.ones_like(obj_Energy)
   obj_pt: np.hypot(obj_px, obj_py)
   obj_logpt: np.log(obj_pt)
   obj_logpx: np.log(np.absolute(obj_px))
   obj_logpy: np.log(np.absolute(obj_py))
   obj_logEnergy: np.log(obj_Energy)
   # replace 0 values by 1e-8 in array "isMET"
   obj_pz_fixed:  np.nan_to_num(obj_pz)
   isMET_fixed: np.where(isMET==0., 1e-8, isMET) 
   #obj_logpz: np.log(np.absolute(obj_pz))
   #obj_deta: ak.ones_like(obj_Energy)
   #obj_dphi: ak.ones_like(obj_Energy)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
   pf_points:
      length: 20
      pad_mode: wrap
      vars: 
         - [obj_eta, null]
         - [obj_phi, null]

   pf_features:
      length: 20
      pad_mode: wrap
      vars:
         - [obj_logpt, null]
         - [obj_logEnergy, null]
         - [obj_eta, null]
         - [obj_phi, null]
         - [isJet, null]
         - [isBJet, null]
         - [isLepton, null]
         - [isPhoton, null]
         - [isMET, null]

   pf_vectors:
      length: 20
      pad_mode: wrap
      vars: 
         - [obj_px, null]
         - [obj_py, null]
         - [obj_pz_fixed, null] 
         - [obj_Energy, null]

   pf_mask:
      length: 20
      pad_mode: constant
      vars: 
         - [obj_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [label_background, label_signal]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)

observers:
   - HT
   - MET

weights:
   #use_precomputed_weights: true
   #weight_branches: [label_signal,'100']
   
   use_precomputed_weights: false
   reweight_method: flat
   reweight_vars:
      MET: [50, 3000]
      HT: [50, 3000]
   reweight_classes: [label_background, label_signal]
   class_weights: [1, 1]
   reweight_hists:
   

#if opts['weights'] is not None:
#   self.weight_name = 'weight_'
#   self.use_precomputed_weights = opts['weights']['use_precomputed_weights']
#   if self.use_precomputed_weights:
#       self.var_funcs[self.weight_name] = '*'.join(opts['weights']['weight_branches'])

